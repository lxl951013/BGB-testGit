//一、初始化
new Vue({
  el:"#demo",//节点
  data:{
    text:"Hello World" //文本内容
  },
  template:"<p>{{text}}</p>" //文本节点
})



//二、数据请求（实现ajax,要不写原生ajax,要不引入jQ,vue-resource,this.$http().then）
getData:function(){
	   $.ajax({
		type:"get",
		url:"test.json",
		async:true,
		data:{
		   skill:"PS"
		},
		success:function(data){
		console.log(data)
		}.bind(this)
	   });
}


//三、绑定数据
双向数据绑定,通过在data里面定义属性值，然后通过v-text或者{{}}实现渲染
//HTML VIEW
<p>{{text}}</p>
//MODEL
data:{
	text:"Hello World"
},


//四、自定义指令:其实就是把相同类型的DOM操作封装在一起，然后实现复用 
全局和局部的directive有单数复数的区分
Vue.directive()//全局定义
    directives:{//局部定义
	color:{
	    bind:function(){
	       this.vm//scope
	       this.el.style.color = "red"//ele
	    }
        }
    }


//五、内置指令
v-bind：响应并更新DOM特性；例如：v-bind:href  v-bind:class  v-bind:title  v-bind:bb
v-on：用于监听DOM事件； 例如：v-on:click  v-on:keyup
v-model：数据双向绑定；用于表单输入等；例如：<input v-model="message">
v-show：条件渲染指令，为DOM设置css的style属性
v-if：条件渲染指令，动态在DOM内添加或删除DOM元素
v-else：条件渲染指令，必须跟v-if成对使用
v-for：循环指令；例如：<li v-for="(item,index) in todos"></li>
v-else-if：判断多层条件，必须跟v-if成对使用；
v-text：更新元素的textContent；例如：<span v-text="msg"></span> 等同于 <span>{{msg}}</span>；
v-html：更新元素的innerHTML；
v-pre：不需要表达式，跳过这个元素以及子元素的编译过程，以此来加快整个项目的编译速度；例如：<span v-pre>{{ this will not be compiled }}</span>；
v-cloak：不需要表达式，这个指令保持在元素上直到关联实例结束编译；
v-once：不需要表达式，只渲染元素或组件一次，随后的渲染，组件/元素以及下面的子元素都当成静态页面不在渲染。


//六、过滤器
<p>{{text|ed}}</p>
Vue.filter("过滤器的名字",function(){})
filters:{//局部定义
   ed:function(input){
	return input+"ed";
   }
}


//七、组件
.vue后缀的文件，然后经过webpack,vue-loader来去处理成我们以下的形式
<template>
	//html只能有一个跟节点
<template>
<script>
	//js
	module.exports = {}
</script>
<style></style>

//全局定义
Vue.component("xheader",{
	template:"<div>第一个组件</div>",
	methods:{},
	data:function(){
		return {}
	},
	filters:{}
})
//局部定义
new Vue({
    components:{}
})



//八、路由
//vue-router	实现单层路由和多层路由
1.引入vue-router,一定要在vue.js之后引入
2.配合webpack引入模块,非webpack下则不用
		Vue.use(VueRouter)
3.配置路由,定义每个组件匹配的路由格式,路由用的时候是在单页面的url后面加#/路由名字
		var router = new VueRouter({
			routes: [{
				path: "/index",
				component: firstCp
			}, {
				path: "/home",
				component: secondCp
			}]
		})
4.添加
<router-view></router-view>


//九、组件通信
1.父传子
props
2.状态管理工具
vuex


//Vue-cli项目框架搭建（https://blog.csdn.net/ywj5200/article/details/79806329  或 https://blog.csdn.net/weixin_42413684/article/details/82215892）
1、全局-g安装node/cmd全局-g安装cnpm, -v 查询相应版本
2、安装webpack:cnpm install webpack -g 及 cnpm install webpack-cli -g ；安装后webpack -v
3、安装vue-cli脚手架构建工具：cnpm install vue-cli -g ；安装后输入 vue -V
4、D盘项目文件夹（①cd 目录路径 ②如果以安装git的，在相关目录右键选择Git Bash Here ）
5、cd-> vue文件夹：cnpm install vue
6、vue文件夹安装vue的脚手架vue-cli：cnpm install -global vue-cli
7、vue文件夹创建一个基于 webpack 模板的新项目：vue init webpack ‘项目名称’
8、启动项目：cnpm run dev //默认服务启动的是本地的8080端口,要改端口到配置文件 config里的index.js


//自己搭建Vue项目框架（https://segmentfault.com/a/1190000006178770）
1.全局-g安装node/cmd，全局-g安装cnpm, -v 查询相应版本
2.cnpm init 得到package.json
3.大文件夹创建app文件夹，内建main.js及分模块Grenter.js
4.大文件夹创建public文件夹，内建index.html入口文件
5.准备webpack的配置，本地安装cnpm install --save-dev webpack和监听服务器cnpm install --save-dev webpack-dev-server；创建一个webpack.config.js
6.修改package.json的scripts属性，新增"build": "webpack --mode production","dev": "webpack --mode development","server": "webpack-dev-server --open"

7.运行webpack --mode production 生成bundle.js 或（webpack ./src/main.js --output-filename ./dist/bundle.js --output-path . --mode development）
9.运行监听cnpm run server /安装缺少的模块：  cnpm instal [缺少的模块名] --save 


//vue的全家桶(vue-cli脚手架,vue-router路由,vue-resource请求,vuex通信)

//vuejs 2.0  https://cn.vuejs.org/v2/guide/computed.html

//npm 命令查询： https://npmjs.org/doc/

//请求封装  https://www.jianshu.com/p/3ab216fa185c


**************************vue自定义下拉组件*****************
select1：
    import select from './select.vue';

    return{list:[{key:"gd",value:"卫我好交换空间"}, ],
	   projectName:{ key:"", value:""},
	   widthData:"100%"
    }
    methods:{
          showProject (){this.projectName.value} 
    }
    components:{select}


